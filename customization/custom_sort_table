#!/bin/bash
TODOTXT="$HOME/.todo/todo.txt"
TEMPFILE=$(mktemp)

# Use awk to prepend each line with ID:X where X is the line number
awk '{ print "ID:" NR " " $0 }' "$TODOTXT" > "$TEMPFILE"

# Get today's and future date in YYYY-MM-DD format
TODAY=$(date +%Y-%m-%d)
TWO_DAYS_LATER=$(date -d "+2 days" +%Y-%m-%d)

# Function to extract fields and print them in table format
print_task_as_table() {
    awk -v color="$1" '
    {
        task_id = ""; priority = ""; due_date = ""; project = ""; desc = "";

        # Use match() to find ID:X anywhere in the line
        if (match($0, /ID:[0-9]+/)) {
            task_id = substr($0, RSTART + 3, RLENGTH - 3);  # Extract the matched ID:X
            sub(/ID:[0-9]+[ ]*/, "", $0);  # Remove the ID:X from the entire line
        }

        # Extract priority if it exists
        if ($1 ~ /\([A-Z]\)/) {
            priority = $1; $1 = "";  # Remove priority from description
        }

        # Extract due date if it exists
        due_index = match($0, /due:[0-9]{4}-[0-9]{2}-[0-9]{2}/);
        if (due_index != 0) {
            due_date = substr($0, due_index + 4, RLENGTH - 4);
            gsub(/due:[0-9]{4}-[0-9]{2}-[0-9]{2}/, "");
        }

        # Extract project if it exists
        project_index = match($0, /\+[^ ]+/);
        if (project_index != "") {
            project = substr($0, project_index + 1, RLENGTH - 1);
            gsub(/\+[^ ]+/, "");  # Remove project from description
            project = substr(project, 1, 20); # Limit the maximum length
        }

        # Remove the context if it exists
        gsub(/ @[^. ]+/, "");

        # Remaining part is the description
        gsub(/^[ \t]+/, "", $0);
        gsub(/[ \t]+$/, "", $0);
        desc = $0;

        # Print in table format with colors
        printf "%s %02d   %-5s %-11s %-20s %-40s%s\n", color, task_id + 0, priority, due_date, project, desc, "'$DEFAULT'";
    }'
}

# Print table header
echo -e "\033[1;34m ID   Pri.  Due Date    Project              Description\033[0m"
echo -e "\033[1;34m ---- ----  ----------  -----------          ----------------------------------------\033[0m"

# 1. Tasks with a due date within the next 2 days
grep -i "due:" "$TEMPFILE" | awk -v today="$TODAY" -v two_days="$TWO_DAYS_LATER" \
    -F "due:" '{
        due_date = substr($2, 1, 10);
        if (due_date <= two_days) print $0
    }' | print_task_as_table "$LIGHT_RED"

# 2. Tasks with priority but no due date
grep -v "due:" "$TEMPFILE" | grep -E "\([A-Z]\)" | sort -k2,2 | print_task_as_table "$YELLOW"

# 3. Tasks with priority and due date after two days (sorted by priority and due date)
grep -i "due:" "$TEMPFILE" | awk -v today="$TWO_DAYS_LATER" \
    -F "due:" '{
        priority = "(Z)"; due_date = "";

        # Extract priority if it exists
        if (match($0, /\([A-Z]\)/)) {
            priority = substr($0, RSTART, RLENGTH);  # Extract the matched priority
        }

        # Extract due date
        due_date = substr($2, 1, 10);

        # Only print tasks with a due date after today (two days later)
        if (due_date > today) {
            print priority, due_date, $0;  # Output priority and due date for sorting
        }
    }' | sort -k1,1 -k2,2 | awk '{ $1=$2=""; print substr($0,3) }' | print_task_as_table "$GREEN" "$id_counter"

# 4. Remaining tasks (no priority, no due date), sorted by project
grep -v "due:" "$TEMPFILE" | grep -v "([A-Z])" | print_task_as_table "$LIGHT_GREY" | sort -k3
